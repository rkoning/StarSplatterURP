#pragma kernel Density
#include "/Includes/Density.compute"
#include "/Includes/Noise.compute"

// Noise settings
StructuredBuffer<float3> offsets;
int octaves;
float lacunarity;
float persistence;
float noiseScale;
float noiseWeight;
float floorOffset;
float weightMultiplier;
float innerRadius;
float outerRadius;
float minHeight;
float maxHeight;
float hardFloorWeight;

float4 params;

[numthreads(numThreads,numThreads,numThreads)]
void Density (int3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) {
        return;
    }

    float3 pos = centre + id * spacing - boundsSize/2;
    float offsetNoise = 0;

    float noise = 0;

    float frequency = noiseScale/100;
    float amplitude = 1;
    float weight = 1;
    for (int j =0; j < octaves; j ++) {
        float n = snoise((pos+offsetNoise) * frequency + offsets[j] + offset);
        float v = 1-abs(n);
        v = v*v;
        v *= weight;
        weight = max(min(v*weightMultiplier,1),0);
        noise += v * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    
    
   //  float finalVal = noise * noiseWeight + (pos.y%params.x) * params.y;

    float finalVal = noise * noiseWeight;
    if ((length(pos) > -innerRadius && (length(pos) > outerRadius || length(pos) < innerRadius))
          || (length(pos) < innerRadius && (length(pos) < -outerRadius || length(pos) > -innerRadius))) {
      finalVal += hardFloorWeight;
    }

    if (pos.y > maxHeight || pos.y < minHeight) {
        finalVal += hardFloorWeight;
    }

    int index = indexFromCoord(id.x,id.y,id.z);
    
    points[index] = float4(pos, finalVal);
    
}

float clamp(float pos, float min, float max) {
    if (pos > max) {
        return max;
    }
    if (pos < min) {
        return min;
    }
    return pos;
}

